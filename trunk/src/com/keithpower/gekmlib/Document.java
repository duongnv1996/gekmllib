package com.keithpower.gekmlib;
/**
 * AutoGenerated.
 *
 */

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
public class Document extends Container
{
    protected List<Feature> feature = new ArrayList<Feature>();


    public Document()
    {
        super();
    }

    public Document(Node parent)
    {
        super(parent);
    }

    public List<Feature> getFeatures()
    {
        return this.feature;
    }

    public void removeFeature(Feature value)
    {
        if(value!=null)
        {
            markDeletedNode(value);
            this.feature.remove(value);
        }
    }

    public void addFeature(Feature value)
    {
        if(value!=null)
        {
            value.setParent(this);
            markCreatedNode(value);
            this.feature.add(value);
        }
    }

    public List<Document> getDocuments()
    {
        List<Document> list = new ArrayList<Document>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof Document)
            {
                 list.add((Document)cur);
            }
        }
        return list;
    }

    public void addDocument(Document value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }

    public List<Folder> getFolders()
    {
        List<Folder> list = new ArrayList<Folder>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof Folder)
            {
                 list.add((Folder)cur);
            }
        }
        return list;
    }

    public void addFolder(Folder value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }

    public List<NetworkLink> getNetworkLinks()
    {
        List<NetworkLink> list = new ArrayList<NetworkLink>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof NetworkLink)
            {
                 list.add((NetworkLink)cur);
            }
        }
        return list;
    }

    public void addNetworkLink(NetworkLink value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }

    public List<GroundOverlay> getGroundOverlays()
    {
        List<GroundOverlay> list = new ArrayList<GroundOverlay>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof GroundOverlay)
            {
                 list.add((GroundOverlay)cur);
            }
        }
        return list;
    }

    public void addGroundOverlay(GroundOverlay value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }

    public List<ScreenOverlay> getScreenOverlays()
    {
        List<ScreenOverlay> list = new ArrayList<ScreenOverlay>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof ScreenOverlay)
            {
                 list.add((ScreenOverlay)cur);
            }
        }
        return list;
    }

    public void addScreenOverlay(ScreenOverlay value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }

    public List<Placemark> getPlacemarks()
    {
        List<Placemark> list = new ArrayList<Placemark>();
        for (Feature cur : getFeatures())
        {
            if(cur instanceof Placemark)
            {
                 list.add((Placemark)cur);
            }
        }
        return list;
    }

    public void addPlacemark(Placemark value)
    {
        if(value!=null)
        {
            value.setParent(this);
            this.feature.add(value);
            markCreatedNode(value);
        }
        else
        {
        }
    }



    public String toKML()
    {
        return toKML(false);
    }
    public String toKML(boolean suppressEnclosingTags)
    {
        String kml="";
        if(!suppressEnclosingTags)
        {
        kml+="<Document";
        if(this.id!=null)
        {
            kml+=" id=\""+this.getId()+"\"";
        }
        if(this.targetId!=null)
        {
            kml+=" targetId=\""+this.getTargetId()+"\"";
        }
        kml+=">\n";
        }
        kml+=super.toKML(true);
        for (Iterator<Feature> iter = this.feature.iterator(); iter.hasNext();)
        {
            Feature cur = iter.next();
            kml+=cur.toKML();
        }
        if(!suppressEnclosingTags)
        {
            kml+="</Document>\n";
        }
        return kml;
    }
    public String toUpdateKML()
    {
        return toUpdateKML(false);
    }
    public String toUpdateKML(boolean suppressEnclosingTags)
    {
        if(!isDirty())
        {
            return "";
        }
        String change = "";
        boolean isPrimDirty = isPrimitiveDirty(); // need to track it after object is setNotDirty
        if(isPrimDirty && !suppressEnclosingTags)
        {
        change+="<Document";
        if(this.id!=null)
        {
            change+=" id=\""+this.getId()+"\"";
        }
        if(this.targetId!=null)
        {
            change+=" targetId=\""+this.getTargetId()+"\"";
        }
        change+=">\n";
        }
        change+=super.toUpdateKML(true);
        for (Iterator<Feature> iter = this.feature.iterator(); iter.hasNext();)
        {
            Feature cur = iter.next();
            if(cur.isDirty())
            {
            change+=cur.toUpdateKML();
            }
        }
        if(isPrimDirty && !suppressEnclosingTags)
        {
        change+="</Document>\n";
        }
        setNotDirty();
        return change;
    }
    public Object clone() throws CloneNotSupportedException
    {
        Document result = (Document)super.clone();
      if(result.feature!=null)
      {
        result.feature = new ArrayList<Feature>();
        for (Iterator<Feature> iter = this.feature.iterator(); iter.hasNext();)
        {
            Feature element = iter.next();
            Feature elementClone = (Feature)element.clone();
            elementClone.setParent(result);
        result.feature.add(elementClone);
        }
      }
        return result;
    }
    public void setRecursiveNotDirty()
    {
        super.setRecursiveNotDirty();
        for (Iterator<Feature> iter = this.feature.iterator(); iter.hasNext();)
        {
            Feature cur = iter.next();
            cur.setRecursiveNotDirty();
        }
    }
}
