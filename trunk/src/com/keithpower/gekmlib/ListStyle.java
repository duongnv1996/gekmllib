package com.keithpower.gekmlib;
/**
 * AutoGenerated.
 *
 */

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
public class ListStyle extends ObjectNode
{
    public static String DEFAULT_LISTITEMTYPE="check";
    protected String listItemType = DEFAULT_LISTITEMTYPE;
    private boolean isListItemTypeDirty;
    public static java.awt.Color DEFAULT_BGCOLOR=Utility.createColor("ffffffff");
    protected java.awt.Color bgColor = DEFAULT_BGCOLOR;
    private boolean isBgColorDirty;
    protected List itemIcon = new ArrayList();


    public ListStyle()
    {
        super();
    }

    public ListStyle(Node parent)
    {
        super(parent);
    }

    public String getListItemType()
    {
        return this.listItemType;
    }

    public void setListItemType(String value)
    {
        this.listItemType = value;
        this.isListItemTypeDirty = true;
        setDirty();
    }

    public java.awt.Color getBgColor()
    {
        return this.bgColor;
    }

    public void setBgColor(String hexValue)
    {
        java.awt.Color newCol = Utility.createColor(hexValue);
        this.bgColor = newCol;
        this.isBgColorDirty = true;
        setDirty();
    }

    public void setBgColor(java.awt.Color aColor)
    {
        this.bgColor = aColor;
        this.isBgColorDirty = true;
        setDirty();
    }

    public ItemIcon [] getItemIcons()
    {
        ItemIcon [] array = new ItemIcon[this.itemIcon.size()];
        return (ItemIcon [])this.itemIcon.toArray(array);
    }

    public void removeItemIcon(ItemIcon value)
    {
        if(value!=null)
        {
            markDeletedNode(value);
            this.itemIcon.remove(value);
        }
    }

    public void addItemIcon(ItemIcon value)
    {
        if(value!=null)
        {
            value.setParent(this);
            markCreatedNode(value);
            this.itemIcon.add(value);
        }
    }



    public String toKML()
    {
        return toKML(false);
    }
    public String toKML(boolean suppressEnclosingTags)
    {
        String kml="";
        if(!suppressEnclosingTags)
        {
        kml+="<ListStyle";
        if(this.id!=null)
        {
            kml+=" id=\""+this.getId()+"\"";
        }
        if(this.targetId!=null)
        {
            kml+=" targetId=\""+this.getTargetId()+"\"";
        }
        kml+=">\n";
        }
        kml+=super.toKML(true);
      if(this.listItemType!=null)
      {
            kml+="<listItemType>"+SpecialCaseFormatter.toKMLString(this.listItemType)+"</listItemType>\n";
      }
      if(this.bgColor!=null)
      {
            kml+="<bgColor>"+SpecialCaseFormatter.toKMLString(this.bgColor)+"</bgColor>\n";
      }
        for (Iterator iter = this.itemIcon.iterator(); iter.hasNext();)
        {
            ItemIcon cur = (ItemIcon)iter.next();
            kml+=cur.toKML();
        }
        if(!suppressEnclosingTags)
        {
            kml+="</ListStyle>\n";
        }
        return kml;
    }
    public String toUpdateKML()
    {
        return toUpdateKML(false);
    }
    public String toUpdateKML(boolean suppressEnclosingTags)
    {
        if(!isDirty())
        {
            return "";
        }
        String change = "";
        boolean isPrimDirty = isPrimitiveDirty(); // need to track it after object is setNotDirty
        if(isPrimDirty && !suppressEnclosingTags)
        {
        change+="<ListStyle";
        if(this.id!=null)
        {
            change+=" id=\""+this.getId()+"\"";
        }
        if(this.targetId!=null)
        {
            change+=" targetId=\""+this.getTargetId()+"\"";
        }
        change+=">\n";
        }
        change+=super.toUpdateKML(true);
        if(this.listItemType!=null && this.isListItemTypeDirty)
        {
            change+="<listItemType>"+SpecialCaseFormatter.toKMLString(this.listItemType)+"</listItemType>\n";
            this.isListItemTypeDirty = false;
        }
        if(this.bgColor!=null && this.isBgColorDirty)
        {
            change+="<bgColor>"+SpecialCaseFormatter.toKMLString(this.bgColor)+"</bgColor>\n";
            this.isBgColorDirty = false;
        }
        for (Iterator iter = this.itemIcon.iterator(); iter.hasNext();)
        {
            ItemIcon cur = (ItemIcon)iter.next();
            if(cur.isDirty())
            {
                change+=cur.toUpdateKML();
            }
        }
        if(isPrimDirty && !suppressEnclosingTags)
        {
        change+="</ListStyle>\n";
        }
        setNotDirty();
        return change;
    }
    public Object clone() throws CloneNotSupportedException
    {
        ListStyle result = (ListStyle)super.clone();
      if(result.itemIcon!=null)
      {
        result.itemIcon = new ArrayList();
        for (Iterator iter = this.itemIcon.iterator(); iter.hasNext();)
        {
            ItemIcon element = (ItemIcon)iter.next();
            ItemIcon elementClone = (ItemIcon)element.clone();
            elementClone.setParent(result);
        result.itemIcon.add(elementClone);
        }
      }
        return result;
    }
    public void setRecursiveNotDirty()
    {
        super.setRecursiveNotDirty();
        this.isListItemTypeDirty = false;
        this.isBgColorDirty = false;
        for (Iterator iter = this.itemIcon.iterator(); iter.hasNext();)
        {
            ItemIcon cur = (ItemIcon)iter.next();
            cur.setRecursiveNotDirty();
        }
    }
}
