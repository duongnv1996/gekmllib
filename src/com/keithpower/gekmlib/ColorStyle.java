package com.keithpower.gekmlib;
/**
 * AutoGenerated.
 *
 */

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
abstract public class ColorStyle extends ObjectNode
{
    public static java.awt.Color DEFAULT_COLOR=Utility.createColor("ffffffff");
    protected java.awt.Color color = DEFAULT_COLOR;
    private boolean isColorDirty;
    public static String DEFAULT_COLORMODE="normal";
    protected String colorMode = DEFAULT_COLORMODE;
    private boolean isColorModeDirty;


    public ColorStyle()
    {
        super();
    }

    public ColorStyle(Node parent)
    {
        super(parent);
    }

    public java.awt.Color getColor()
    {
        return this.color;
    }

    public void setColor(String hexValue)
    {
        java.awt.Color newCol = Utility.createColor(hexValue);
        this.color = newCol;
        this.isColorDirty = true;
        setDirty();
    }

    public void setColor(java.awt.Color aColor)
    {
        this.color = aColor;
        this.isColorDirty = true;
        setDirty();
    }

    public String getColorMode()
    {
        return this.colorMode;
    }

    public void setColorMode(String value)
    {
        this.colorMode = value;
        this.isColorModeDirty = true;
        setDirty();
    }



    public String toKML()
    {
        return toKML(false);
    }
    public String toKML(boolean suppressEnclosingTags)
    {
        String kml="";
        kml+=super.toKML(true);
      if(this.color!=null)
      {
            kml+="<color>"+SpecialCaseFormatter.toKMLString(this.color)+"</color>\n";
      }
      if(this.colorMode!=null)
      {
            kml+="<colorMode>"+SpecialCaseFormatter.toKMLString(this.colorMode)+"</colorMode>\n";
      }
        return kml;
    }
    public String toUpdateKML()
    {
        return toUpdateKML(false);
    }
    public String toUpdateKML(boolean suppressEnclosingTags)
    {
        if(!isDirty())
        {
            return "";
        }
        String change = "";
        change+=super.toUpdateKML(true);
        if(this.color!=null && this.isColorDirty)
        {
            change+="<color>"+SpecialCaseFormatter.toKMLString(this.color)+"</color>\n";
            this.isColorDirty = false;
        }
        if(this.colorMode!=null && this.isColorModeDirty)
        {
            change+="<colorMode>"+SpecialCaseFormatter.toKMLString(this.colorMode)+"</colorMode>\n";
            this.isColorModeDirty = false;
        }
        setNotDirty();
        return change;
    }
    public Object clone() throws CloneNotSupportedException
    {
        ColorStyle result = (ColorStyle)super.clone();
        return result;
    }
    public void setRecursiveNotDirty()
    {
        super.setRecursiveNotDirty();
        this.isColorDirty = false;
        this.isColorModeDirty = false;
    }
}
